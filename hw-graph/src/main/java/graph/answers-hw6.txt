## CSE 331 HW6 Questions

NOTE: This file is used as part of HW6, and is not due as part of the HW5
submission. You may leave it blank for HW5.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

A. An advantage of having a collection of nodes and a collection of edges would be space complexity since each node
edge is only stored once (no repeats). A disadvantage of this representation would be the runtime complexity to
find outgoing edges since the collection of edges would have to be searched through each time an edge is requested.

B. An advantage of having an adjacency list would be that each node's edges are immediately accessible (good runtime
complexity). A disadvantage of this implementation would be space complexity since the representation would be creating
a list for each individual node.

C. An advantage of having an adjacency matrix would be the ability to find all edges between two nodes immediately
(fast runtime complexity). However, a disadvantage of this type of implementation would be that it would be a large
space complexity since having a matrix of nodes would require there to be two sets of the same nodes.



2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I chose representation B (adjacency list) since it seems relatively simple to implement. I would just have to
make one list for the nodes and create a list inside each node to collect its outgoing edges.


## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.




2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.



